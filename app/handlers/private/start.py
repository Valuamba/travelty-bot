import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InputFile, FSInputFile, CallbackQuery
from aiogram.dispatcher.fsm.context import FSMContext
import os

from app.config import Config
from app.handlers.private.add_route import info_departure_date, info_departure_date_inline
from app.handlers.private.keyboard import MainInlineMarkup, StartMenuCD, StartMenuType
from app.handlers.service.service_handlers import start
from app.utils.update import get_user_id


logger = logging.getLogger(__name__)

async def get_start_message(ctx: Message, bot: Bot):
    
    text = []
    text.append('üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b>\n')
    text.append('–Ø, <b>–¢—Ä—ç–≤—ç–ª—Ç–∏</b> ü§ñ, –ø–æ–º–æ–≥–∞—é –≤–æ–¥–∏—Ç–µ–ª—è–º –Ω–∞–π—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.\n')
    text.append('<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>')
    text.append('  - –≤–æ–¥–∏—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞;')
    text.append('  - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é 5-15 –º–∏–Ω, 08:00-23:00 –ú–°–ö;')
    text.append('  - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ @TraveltyCom;\n')
    text.append('<b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b> @travelty_staff (08:00-23:00 –ú–°–ö).')

    # path = os.path.join(Config.ROOT_DIR, 'app/assets/TRAVELTY_bot.png')
    path = os.path.join(Config.ROOT_DIR, 'app/assets/1.png')
    logo = FSInputFile(path, "logo")

    logger.info(f"Start command with logo {path}")

    await bot.send_photo(chat_id=get_user_id(ctx), 
                         photo=logo,
                         caption='\n'.join(text), reply_markup=MainInlineMarkup().get_start_command_keyboard())
    # await m.answer(text='\n'.join(text), reply_markup=MainInlineMarkup().get_start_command_keyboard())


async def handle_start_menu(ctx: CallbackQuery, callback_data: StartMenuCD, bot: Bot, state: FSMContext):
    if callback_data.type == StartMenuType.CREATE_ROUTE:
        await start(ctx, bot, state)
        

def setup(dp: Dispatcher):
    dp.message.register(get_start_message, commands="start")
    dp.callback_query.register(handle_start_menu, StartMenuCD.filter())
